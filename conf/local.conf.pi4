#
# Machine Selection
#
# You need to select a specific machine to target the build with:
#
MACHINE ?= "raspberrypi4-64"
#
# This sets the default machine to be qemuarm64 if no other machine is selected:
#MACHINE ??= "qemuarm64"

#
# Default policy config
#
# The distribution setting controls which policy settings are used as defaults.
# The default value is fine for general Yocto project use, at least initially.
# Ultimately when creating custom policy, people will likely end up subclassing 
# these defaults.
#
DISTRO ?= "poky"

#
# Package Management configuration
#
# This variable lists which packaging formats to enable. Multiple package backends
# can be enabled at once and the first item listed in the variable will be used
# to generate the root filesystems.
# Options are:
#  - 'package_deb' for debian style deb files
#  - 'package_ipk' for ipk files are used by opkg (a debian style embedded package manager)
#  - 'package_rpm' for rpm style packages
# E.g.: PACKAGE_CLASSES ?= "package_rpm package_deb package_ipk"
# We default to rpm:
PACKAGE_CLASSES ?= "package_rpm"

#
# Additional image features
#
# The following is a list of additional classes to use when building images which
# enable extra features. Some available options which can be included in this variable
# are:
#   - 'buildstats' collect build statistics
USER_CLASSES ?= "buildstats"

#
# Interactive shell configuration
#
# Under certain circumstances the system may need input from you and to do this it
# can launch an interactive shell. It needs to do this since the build is
# multithreaded and needs to be able to handle the case where more than one parallel
# process may require the user's attention. The default is iterate over the available
# terminal types to find one that works.
#
# Examples of the occasions this may happen are when resolving patches which cannot
# be applied, to use the devshell or the kernel menuconfig
#
# Supported values are auto, gnome, xfce, rxvt, screen, konsole (KDE 3.x only), none
# Note: currently, Konsole support only works for KDE 3.x due to the way
# newer Konsole versions behave
#OE_TERMINAL = "auto"
# By default disable interactive patch resolution (tasks will just fail instead):
PATCHRESOLVE = "noop"

#
# Disk Space Monitoring during the build
#
# Monitor the disk space during the build. If there is less that 1GB of space or less
# than 100K inodes in any key build location (TMPDIR, DL_DIR, SSTATE_DIR), gracefully
# shutdown the build. If there is less than 100MB or 1K inodes, perform a hard abort
# of the build. The reason for this is that running completely out of space can corrupt
# files and damages the build in ways which may not be easily recoverable.
# It's necessary to monitor /tmp, if there is no space left the build will fail
# with very exotic errors.
BB_DISKMON_DIRS ??= "\
    STOPTASKS,${TMPDIR},1G,100K \
    STOPTASKS,${DL_DIR},1G,100K \
    STOPTASKS,${SSTATE_DIR},1G,100K \
    STOPTASKS,/tmp,100M,100K \
    ABORT,${TMPDIR},100M,1K \
    ABORT,${DL_DIR},100M,1K \
    ABORT,${SSTATE_DIR},100M,1K \
    ABORT,/tmp,10M,1K"

#
# Qemu configuration
#
# By default native qemu will build with a builtin VNC server where graphical output can be
# seen. The line below enables the SDL UI frontend too.
PACKAGECONFIG:append:pn-qemu-system-native = " sdl"
# By default libsdl2-native will be built, if you want to use your host's libSDL instead of 
# the minimal libsdl built by libsdl2-native then uncomment the ASSUME_PROVIDED line below.
#ASSUME_PROVIDED += "libsdl2-native"

# CONF_VERSION is increased each time build/conf/ changes incompatibly and is used to
# track the version of this file when it was generated. This can safely be ignored if
# this doesn't mean anything to you.
CONF_VERSION = "2"

# Custom yocto tweaks
## Enable Systemd
DISTRO_FEATURES:append = " systemd"
INIT_MANAGER = "systemd"

## Enable rpi4 graphics
MACHINE_FEATURES:append = " vc4graphics"
DISTRO_FEATURES:remove = "x11 wayland vulkan ptest"

## Set image types for yocto build
IMAGE_FSTYPES = "wic.bz2 wic.bmap tar.zst ext4"

## Enable Wi-Fi drivers
IMAGE_INSTALL:append = " packagegroup-base-wifi networkmanager dhcpcd"

## Raspberry Pi 4 configuration (stored in config.txt)
DISABLE_SPLASH = "1"
ENABLE_UART="1"
MPI4008="1"

## Specify which Raspberry Pi overlays to include
RPI_KERNEL_DEVICETREE_OVERLAYS = " \
    overlays/overlay_map.dtb \
    overlays/at86rf233.dtbo \
    overlays/ads7846.dtbo \
    overlays/gpio-ir.dtbo \
    overlays/gpio-ir-tx.dtbo \
    overlays/gpio-key.dtbo \
    overlays/gpio-poweroff.dtbo \
    overlays/gpio-shutdown.dtbo \
    overlays/i2c0.dtbo \
    overlays/i2c1.dtbo \
    overlays/i2c-gpio.dtbo \
    overlays/i2c-rtc.dtbo \
    overlays/spi0-0cs.dtbo \
    overlays/spi0-1cs.dtbo \
    overlays/rpi-poe.dtbo \
    overlays/uart0.dtbo \
    overlays/vc4-fkms-v3d.dtbo \
    overlays/vc4-fkms-v3d-pi4.dtbo \
    overlays/vc4-kms-v3d.dtbo \
    overlays/vc4-kms-v3d-pi4.dtbo \
"

#
# Additional Raspberry Pi configuration
#
# The `RPI_EXTRA_CONFIG` variable can be used to manually add additional lines to
# the `config.txt` file . To add multiple lines you must include `\n` separators.
# If double-quotes are needed in the lines you are adding you can use single
# quotes around the whole string.
#
RPI_EXTRA_CONFIG += '\n \
# Run as fast firmware / board allows \n\
arm_boost=1 \n\
arm_64bit=1 \n\n\
dtoverlay=gpio-shutdown,gpio_pin=13 \n\
#dtoverlay=i2c-gpio,i2c_gpio_scl=13, bus=1 \n\
'

## Release packages
IMAGE_INSTALL:append = " qtbase qtsvg packagegroup-fonts-truetype"
IMAGE_INSTALL:append = " qt-cybersecurity-lesson"

## Raspberry Pi 4 Firmware
IMAGE_INSTALL:append = " \
    linux-firmware-rpidistro-bcm43455 \
    linux-firmware-rpidistro-bcm43456 \
"

## Enable Wi-Fi drivers
IMAGE_INSTALL:append = " packagegroup-base-wifi dhcpcd"

## Enable GPU drivers
IMAGE_INSTALL:append = " \
    kernel-module-v3d \
    kernel-module-drm-mipi-dbi \
"

## Development packages
#IMAGE_INSTALL:append = " rsync vim  openssh-sftp-server htop net-tools evtest"
#IMAGE_INSTALL:append = " gdb gdbserver"

## Additional KDE modules
#IMAGE_INSTALL:append = " qt3d qtgraphicaleffects qtcharts qtconnectivity \
#    qtdatavis3d qtdeclarative qtimageformats qtmultimedia \
#    qtquickdesigner-components qtsensors qtserialport qtsvg qttools \
#    qttranslations qtvirtualkeyboard qtwebsockets gdb gdbserver qtnetworkauth"
